tosca_definitions_version: cloudify_dsl_1_3
imports:
  - 'http://www.getcloudify.org/spec/cloudify/4.0/types.yaml'
  - 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml'
plugins: {}
node_types: {}

dsl_definitions:
  cloudify_agent_info: &cloudify_agent_info
    user: ec2-user
    key: /home/ec2-user/work/shay-cloudify.pem

inputs:
  Compute-WebServer-IP:
    type: string
    default: "10.8.0.18"
  Compute-APP-Server-IP:
    type: string
    default: "10.8.0.18"
  Compute-LB-IP:
    type: string
    default: "10.8.0.18"
  Compute-DB-Master-IP:
    type: string
    default: "10.8.0.18"
  Compute-DB-Slave-IP:
    type: string
    default: "10.8.0.19"
  WEB_SERVER_PORT:
    default: "6000"
node_templates:
  Compute-WebServer:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-WebServer-IP }
      cloudify_agent: *cloudify_agent_info
    relationships:
      - type: cloudify.relationships.connected_to
        target: Compute-APP-Server
    interfaces:
      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector:
                  config:
                    devices: x?vd[a-z]+[0-9]*$
                NetworkCollector: {}
  Compute-DB-Master:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-DB-Master-IP }
      cloudify_agent: *cloudify_agent_info
    relationships: []
  Compute-DB-Slave:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-DB-Slave-IP }
      cloudify_agent: *cloudify_agent_info
    relationships: []
  Compute-APP-Server:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-APP-Server-IP }
      cloudify_agent: *cloudify_agent_info
    relationships:
      - type: cloudify.relationships.connected_to
        target: Compute-DB-Master
      - type: cloudify.relationships.connected_to
        target: Compute-DB-Slave
  Compute-LB:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip: { get_input: Compute-LB-IP }
      cloudify_agent: *cloudify_agent_info
    relationships:
      - type: cloudify.relationships.connected_to
        target: Compute-WebServer
  APPServer-JBoss:
    type: cloudify.nodes.ApplicationServer
    instances:
      deploy: 1
    properties:
    relationships:
      - type: cloudify.relationships.contained_in
        target: Compute-APP-Server
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configureAPPServer.sh
        start: scripts/startAPPServer.sh
        stop: scripts/stopAPPServer.sh
  WebServer-Tomcat:
    type: cloudify.nodes.WebServer
    instances:
      deploy: 1
    properties:
      port:  { get_input: WEB_SERVER_PORT }
    relationships:
      - type: cloudify.relationships.contained_in
        target: Compute-WebServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configureWebServer.sh
        start: scripts/startWebServer.sh
        stop: scripts/stopWebServer.sh
  DBMS-Master:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: Compute-DB-Master
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configureMasterDB.sh
        start: scripts/startDB.sh
        stop: scripts/stopDB.sh
  DBMS-Slave:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: Compute-DB-Slave
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configureStandbyDB.sh
        start: scripts/startDB.sh
        stop: scripts/stopDB.sh
  LoadBalancer:
    type: cloudify.nodes.LoadBalancer
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: Compute-LB
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}
        configure: 
          implementation: scripts/configureLB.sh
          inputs:
            process:
              env:
                LB_HOST_IP: { get_input: Compute-LB-IP }
        start: scripts/startLB.sh
        stop: scripts/stopLB.sh
        delete: {}
      cloudify.interfaces.validation:
        creation: {}
        deletion: {}
relationships: {}
